{
  "comments": [
    {
      "key": {
        "uuid": "f2e2061a_fbd77b8e",
        "filename": "include/libunwind_i.h",
        "patchSetId": 5
      },
      "lineNbr": 289,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-03T18:18:48Z",
      "side": 1,
      "message": "we should fix the bionic headers, so if we commit this in the meantime, we should add a comment here. (i\u0027ve raised http://b/12871594 to fix __BIONIC_FORTIFY_INLINE.)",
      "revId": "05a7196f90d5e94da267c24ddcbc05238ee4b7cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3202de8d_494b6547",
        "filename": "include/libunwind_i.h",
        "patchSetId": 5
      },
      "lineNbr": 289,
      "author": {
        "id": 1038054
      },
      "writtenOn": "2014-02-03T18:41:57Z",
      "side": 1,
      "message": "That\u0027s what I first thought but looking at the definition of __BIONIC_FORTIFY_INLINE I concluded that the issue was that the redefinition of inline was polluting fcntl.h and that \"__attribute__ ((gnu_inline))\" needed the inline keyword to work properly (the symptoms were simple: impossible to use fcntl.h because of __builtin_va_arg_pack_len macros which *have to* be in an inlined function. Your conclusion might be different but I genuinely think the problem is to be fixed in libunwind.\n\nYet I was puzzled with the definition of __BIONIC_FORTIFY_INLINE: doesn\u0027t \"__attribute__ ((gnu_inline))\" imply \"__attribute__ ((always_inline))\"?\n\nAlso, I cannot access the URL to the bug. Could you give me an externally accessible one please?\n\nFinally, what kind of comment would you like to see here (if you still think there should be one)?",
      "parentUuid": "f2e2061a_fbd77b8e",
      "revId": "05a7196f90d5e94da267c24ddcbc05238ee4b7cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2e2061a_468356ed",
        "filename": "include/libunwind_i.h",
        "patchSetId": 5
      },
      "lineNbr": 289,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-03T19:10:51Z",
      "side": 1,
      "message": "the fact that you can build libunwind with glibc seems like a pretty clear sign to me that this is our bug :-)\n\nyou raise good questions though. i\u0027m not sure why it works with glibc.\n\ni was assuming cferris would write the comment. with AOSP patches it doesn\u0027t make much sense to have the original uploader fix nits; it just adds an extra round-trip time -- one that\u0027s often a day or longer -- to something we could do ourselves in a couple of minutes.",
      "parentUuid": "3202de8d_494b6547",
      "revId": "05a7196f90d5e94da267c24ddcbc05238ee4b7cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d24d0211_5bcb0360",
        "filename": "include/libunwind_i.h",
        "patchSetId": 5
      },
      "lineNbr": 289,
      "author": {
        "id": 1038054
      },
      "writtenOn": "2014-02-03T19:37:52Z",
      "side": 1,
      "message": "\u003ethe fact that you can build libunwind with glibc seems like a pretty clear sign to me that this is our bug :-)\n\nGood point :-).\n\n\u003ei\u0027m not sure why it works with glibc.\n\nLooking at glibc\u0027s source code it seems to be because they don\u0027t use the inline keyword but __inline.\n\n\u003eit just adds an extra round-trip time -- one that\u0027s often a day or longer\n\ndifferent timezones ... J",
      "parentUuid": "f2e2061a_468356ed",
      "revId": "05a7196f90d5e94da267c24ddcbc05238ee4b7cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b20eceb3_44010263",
        "filename": "include/libunwind_i.h",
        "patchSetId": 5
      },
      "lineNbr": 289,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-03T19:52:36Z",
      "side": 1,
      "message": "yeah, i just saw __inline but i\u0027m not sure where that comes from. seems like only \"inline\" and \"__inline__\" are mentioned in the GCC documentation, but switching to __inline (or __inline__?) seems like an easy fix. i\u0027ll try that this afternoon if you you don\u0027t beat me to it...\n\n(i wasn\u0027t blaming you or other AOSP contributors for delays; just pointing out that they\u0027re inevitable. even if someone\u0027s in the same time zone and has no other work to do, stuff like comments and whitespace and the like take more time to explain than they take to just fix!)",
      "parentUuid": "d24d0211_5bcb0360",
      "revId": "05a7196f90d5e94da267c24ddcbc05238ee4b7cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}