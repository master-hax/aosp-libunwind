{
  "comments": [
    {
      "key": {
        "uuid": "300d83bc_76a03e19",
        "filename": "src/aarch64/Gis_signal_frame.c",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2014-09-17T17:09:15Z",
      "side": 1,
      "message": "The only case I would be worried about is if we are in the signal frame and we never adjusted the ip. Do you know if this works if you attempt to starts backtracking from the signal frame itself and a function called by the signal frame?\n\nIf not, there is a dwarf.frame variable that can be used to keep track of this. I only use it for x86, so it\u0027s not modified anywhere but in the x86 version of Gstep.c.",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 52,
        "endChar": 10
      },
      "revId": "6d90028ee35b7028004e5a4f39ffa55dd0fbd6de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0fe8bbb_6eb983c9",
        "filename": "src/aarch64/Gis_signal_frame.c",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-09-17T17:16:23Z",
      "side": 1,
      "message": "yeah, after worrying about this myself yesterday afternoon i changed eugenis\u0027 original test (which unwinds directly from the signal handler) to also unwind from a function called by the signal handler.\n\nnow every platform should be able to unwind okay (at least with the libgcc unwinder), i\u0027ll turn the test into something we can check in. i\u0027ll add both cases, since it worried both of us.\n\n(as for dwarf.frame, i was confused why that isn\u0027t updated for the signal frame itself. i didn\u0027t realize that was our own addition.)",
      "parentUuid": "300d83bc_76a03e19",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 52,
        "endChar": 10
      },
      "revId": "6d90028ee35b7028004e5a4f39ffa55dd0fbd6de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}